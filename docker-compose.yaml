services:

  # ──────────── Dataroom DB ────────────
  dataroom-db:
    build:
      context: ./dataroom-db
      dockerfile: Dockerfile
    image: vltrn/dataroom-db:custom
    container_name: vltrn-dataroom-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dataroom
    volumes:
      - dataroom-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ──────────── Scout-Warn Agent ────────────
  scout-warn:
    build:
      context: ./agents/scout-warn
      dockerfile: Dockerfile
    image: vltrn/scout-warn:1.0.0
    container_name: vltrn-scout-warn
    env_file:
      - .env
    depends_on:
      dataroom-db:
        condition: service_healthy
    command: npm start

  # ──────────── Marketer-Agent ────────────
  marketer-agent:
    build:
      context: ./agents/marketer-agent
      dockerfile: Dockerfile
    image: vltrn/marketer-agent:1.0.0
    container_name: vltrn-marketer-agent
    env_file:
      - .env
    depends_on:
      dataroom-db:
        condition: service_healthy
    command: npm start

  # ──────────── Intent-Parser Service ────────────
  intent-parser:
    build:
      context: ./intent-parser
      dockerfile: Dockerfile
    image: vltrn/intent-parser:1.0.0
    container_name: vltrn-intent-parser
    ports:
      - "8081:8081"
    env_file:
      - .env
    restart: always

  # ──────────── Mission-Strategist Service ────────────
  mission-strategist:
    build:
      context: ./mission-strategist
      dockerfile: Dockerfile
    image: vltrn/mission-strategist:1.0.0
    container_name: vltrn-mission-strategist
    ports:
      - "8082:8082"
    env_file:
      - .env
    restart: always

  # ──────────── Stateful Orchestrator Service ────────────
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    image: vltrn/orchestrator:1.0.0
    container_name: vltrn-orchestrator
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker-compose.yaml:/docker-compose.yaml
      - ./.env:/.env
    depends_on:
      dataroom-db:
        condition: service_healthy
    restart: always

  # --- New Python Selenium Agent ---
  scout-selenium-py:
    build: ./agents/scout-selenium-py
    # This agent is run on-demand, so no restart policy or ports needed

  # ──────────── Redis for BullMQ ────────────
  redis:
    image: redis:7-alpine
    container_name: vltrn-redis
    ports:
      - "6379:6379"
    restart: always

volumes:
  dataroom-data:
